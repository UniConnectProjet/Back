name: Symfony Backend CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: app_test
          MYSQL_USER: app
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: root
        ports: ['3306:3306']
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      APP_ENV: test
      DATABASE_URL: "mysql://app:secret@127.0.0.1:3306/app_test?serverVersion=8&charset=utf8mb4"

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, pdo, pdo_mysql, intl
          tools: composer:v2

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress --no-interaction --prefer-dist

      - name: Wait for MySQL
        run: |
          for i in `seq 1 30`; do
            (echo > /dev/tcp/127.0.0.1/3306) >/dev/null 2>&1 && break
            echo "⏳ Waiting for MySQL..."
            sleep 2
          done

      - name: Run migrations
        run: php bin/console doctrine:migrations:migrate --no-interaction

      - name: Run PHPUnit
        run: vendor/bin/phpunit --colors=never

      - name: Composer audit
        run: composer audit

  # --- 2) Build & Deploy ---
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4

      - name: Login DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build & push avec tags en fonction de la branche
      - name: Build & push (main → prod/latest)
        if: github.ref == 'refs/heads/main'
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          docker build -t inesbrm1/uniconnect-backend:prod \
                       -t inesbrm1/uniconnect-backend:latest \
                       -t inesbrm1/uniconnect-backend:${SHORT_SHA} .
          docker push inesbrm1/uniconnect-backend:prod
          docker push inesbrm1/uniconnect-backend:latest
          docker push inesbrm1/uniconnect-backend:${SHORT_SHA}

      - name: Build & push (dev → preprod/dev-latest)
        if: github.ref == 'refs/heads/dev'
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          docker build -t inesbrm1/uniconnect-backend:preprod \
                       -t inesbrm1/uniconnect-backend:dev-latest \
                       -t inesbrm1/uniconnect-backend:${SHORT_SHA} .
          docker push inesbrm1/uniconnect-backend:preprod
          docker push inesbrm1/uniconnect-backend:dev-latest
          docker push inesbrm1/uniconnect-backend:${SHORT_SHA}

      # Déploiement SSH
      - name: Deploy PROD (main)
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /var/www
            docker pull inesbrm1/uniconnect-backend:prod
            docker compose up -d --no-deps --build backend

      - name: Deploy PREPROD (dev)
        if: github.ref == 'refs/heads/dev'
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /var/www
            docker pull inesbrm1/uniconnect-backend:preprod
            docker compose up -d --no-deps --build backend-preprod
