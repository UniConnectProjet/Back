name: Symfony Backend CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    name: tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: xdebug
          extensions: intl, mbstring, pdo_sqlite, xml, ctype, iconv
          tools: composer

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --no-progress --prefer-dist --optimize-autoloader

      - name: Rebuild JWT keys
        run: |
          mkdir -p config/jwt
          echo "${{ secrets.JWT_PRIVATE_KEY }}" | base64 -d > config/jwt/private.pem
          echo "${{ secrets.JWT_PUBLIC_KEY }}" | base64 -d > config/jwt/public.pem
          chmod 600 config/jwt/private.pem config/jwt/public.pem

      - name: Prepare SQLite database (test)
        env:
          APP_ENV: test
          DATABASE_URL: 'sqlite:///%kernel.project_dir%/var/test.db'
        run: |
          mkdir -p var
          rm -f var/test.db
          # Crée la DB et le schéma pour l'environnement de test
          php bin/console doctrine:database:create --if-not-exists --env=test
          # Utilise soit schema:create, soit tes migrations (décommente la ligne qui te convient)
          php bin/console doctrine:schema:create --env=test
          # php bin/console doctrine:migrations:migrate --no-interaction --env=test

      - name: Run tests (with Clover coverage)
        env:
          APP_ENV: test
          DATABASE_URL: 'sqlite:///%kernel.project_dir%/var/test.db'
          JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}
        run: |
          mkdir -p build/logs
          php vendor/bin/phpunit --coverage-clover build/logs/clover.xml

  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, pdo_mysql
  deploy: 
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push image
        run: |
          TAG=$([[ "${GITHUB_REF##*/}" == "main" ]] && echo "prod" || echo "preprod")
          docker build -t inesbrm1/uniconnect-backend:$TAG .
          docker push inesbrm1/uniconnect-backend:$TAG

      - name: Deploy PROD (main)
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /var/www
            docker pull inesbrm1/uniconnect-backend:prod
            docker compose up -d --no-deps --build backend

      - name: Deploy PREPROD (dev)
        if: github.ref == 'refs/heads/dev'
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /var/www
            docker pull inesbrm1/uniconnect-backend:preprod
            docker compose up -d --no-deps --build backend-preprod
