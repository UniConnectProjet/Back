name: Symfony CI/CD

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: app
          MYSQL_USER: app
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: root
        ports: ['3306:3306']
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      APP_ENV: test
      # IMPORTANT : base sans _test ; Doctrine ajoutera _test via config/packages/test/doctrine.yaml
      DATABASE_URL: "mysql://app:secret@127.0.0.1:3306/app?serverVersion=8.0&charset=utf8mb4"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, pdo, pdo_mysql
          tools: composer, symfony

      - name: Install dependencies
        run: composer install --no-progress --no-interaction --prefer-dist

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -uroot -proot --silent; then
              echo "MySQL is up"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Migrate test database schema
        run: php bin/console doctrine:migrations:migrate --env=test --no-interaction

      - name: Run PHPUnit tests
        run: ./vendor/bin/phpunit --testdox

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Connexion DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker backend image
        run: |
          docker build -t inesbrm1/uniconnect-backend:latest .
          docker push inesbrm1/uniconnect-backend:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            export JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /var/www
            docker pull inesbrm1/uniconnect-backend:latest
            docker compose down
            docker compose up -d --build --remove-orphans

      - name: Configurer les clés JWT et mettre à jour la base de données
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd /var/www
            # 1. Créer le dossier JWT en root
            docker compose exec -T --user root backend mkdir -p config/jwt

            # 2. Injecter les clés en base64 (décodées)
            echo "${{ secrets.JWT_PRIVATE_KEY }}" | base64 -d | docker compose exec -T --user root backend sh -c 'cat > config/jwt/private.pem'
            echo "${{ secrets.JWT_PUBLIC_KEY }}" | base64 -d | docker compose exec -T --user root backend sh -c 'cat > config/jwt/public.pem'

            # 3. Fixer les permissions
            docker compose exec -T --user root backend chmod 600 config/jwt/*.pem

            # 4. Exporter la passphrase JWT dans le conteneur (si utile pour Symfony)
            export JWT_PASSPHRASE="${{ secrets.JWT_PASSPHRASE }}"

            # 5. Installer les dépendances
            docker compose exec -T backend composer install --no-interaction --prefer-dist

            # 6. Mise à jour du schéma
            docker compose exec -T backend php bin/console doctrine:schema:update --force --no-interaction