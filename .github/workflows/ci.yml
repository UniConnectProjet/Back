name: Symfony Backend CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      database:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: uniconnect_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      APP_ENV: test
      DATABASE_URL: "mysql://root:root@127.0.0.1:3306/uniconnect"

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: xdebug
          extensions: mbstring, xml, ctype, iconv, pdo_mysql
          tools: composer

      - name: Install deps
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Wait for MySQL
        run: |
          sudo apt-get update && sudo apt-get install -y mysql-client
          for i in {1..30}; do
            mysqladmin ping -h 127.0.0.1 -P 3306 -uroot -proot && break
            sleep 2
          done

      - name: Prepare test database
        run: |
          php bin/console doctrine:database:create --env=test --if-not-exists
          php bin/console doctrine:migrations:migrate --no-interaction --env=test
          php bin/console doctrine:fixtures:load --env=test --group=test --no-interaction


      - name: Run PHPUnit (coverage + junit)
        run: |
          mkdir -p coverage var
          if [ -f bin/phpunit ]; then PHPUNIT=bin/phpunit; else PHPUNIT=vendor/bin/phpunit; fi
          php $PHPUNIT --testdox --log-junit var/junit.xml --coverage-clover coverage/coverage.xml

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, pdo_mysql
  deploy: 
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push image
        run: |
          TAG=$([[ "${GITHUB_REF##*/}" == "main" ]] && echo "prod" || echo "preprod")
          docker build -t inesbrm1/uniconnect-backend:$TAG .
          docker push inesbrm1/uniconnect-backend:$TAG

      - name: Deploy PROD (main)
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /var/www
            docker pull inesbrm1/uniconnect-backend:prod
            docker compose up -d --no-deps --build backend

      - name: Deploy PREPROD (dev)
        if: github.ref == 'refs/heads/dev'
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /var/www
            docker pull inesbrm1/uniconnect-backend:preprod
            docker compose up -d --no-deps --build backend-preprod
