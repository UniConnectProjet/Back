name: Tests & SonarQube

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  # Déclenchement automatique après le workflow de déploiement
  workflow_run:
    workflows: ["Deploy"]   # <-- mets ici le nom de TON workflow de déploiement
    types: [ completed ]

jobs:
  sonarqube:
    name: PHPUnit + SonarQube
    runs-on: ubuntu-latest

    # si on vient d'un workflow_run, ne lancer que si le déploiement a réussi
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}

    env:
      APP_ENV: test
      DATABASE_URL: sqlite:///%kernel.project_dir%/var/data/test.db

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: pcov
          extensions: intl, mbstring, pdo_sqlite
          tools: composer

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Prepare test database (SQLite)
        run: |
          php bin/console doctrine:database:create --env=test --if-not-exists
          php bin/console doctrine:schema:create --env=test
          # Si tu utilises des fixtures :
          # php bin/console doctrine:fixtures:load --no-interaction --env=test

      - name: Run PHPUnit (with coverage + junit)
        run: |
          mkdir -p coverage var
          if [ -f bin/phpunit ]; then PHPUNIT=bin/phpunit; else PHPUNIT=vendor/bin/phpunit; fi
          php $PHPUNIT --testdox --log-junit var/junit.xml --coverage-clover coverage/coverage.xml

      - name: Run SonarQube Scanner
        uses: SonarSource/sonarqube-scan-action@v1.1.0
        with:
          projectBaseDir: .
          # Si tu n'as pas de fichier sonar-project.properties, on passe les props ici :
          args: >
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.exclusions=var/**,vendor/**
            -Dsonar.php.coverage.reportPaths=coverage/coverage.xml
            -Dsonar.junit.reportPaths=var/junit.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # (Optionnel) échouer le job si le Quality Gate est KO
      # Nécessite le webhook Sonar->GitHub Actions configuré côté SonarQube
      - name: SonarQube Quality Gate
        if: always()
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
