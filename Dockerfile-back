FROM nginx:1.25-alpine

# Installer PHP et les extensions nécessaires
RUN apk add --no-cache \
    php82 \
    php82-fpm \
    php82-pdo \
    php82-pdo_mysql \
    php82-pdo_pgsql \
    php82-mbstring \
    php82-xml \
    php82-zip \
    php82-tokenizer \
    php82-dom \
    php82-fileinfo \
    php82-json \
    php82-curl \
    php82-openssl \
    php82-phar \
    php82-simplexml \
    php82-session \
    php82-ctype \
    git \
    unzip \
    curl

# Lien symbolique pour simplifier l'utilisation de PHP
RUN ln -s /usr/bin/php82 /usr/bin/php

# Installer Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Configurer NGINX
COPY nginx-site.conf /etc/nginx/conf.d/default.conf.template

# Configurer PHP-FPM
RUN sed -i 's/;clear_env = no/clear_env = no/' /etc/php82/php-fpm.d/www.conf
RUN sed -i 's/user = nobody/user = nginx/' /etc/php82/php-fpm.d/www.conf
RUN sed -i 's/group = nobody/group = nginx/' /etc/php82/php-fpm.d/www.conf
RUN sed -i 's/listen = 127.0.0.1:9000/listen = 9000/' /etc/php82/php-fpm.d/www.conf

# Créer les répertoires de travail
WORKDIR /var/www/html
RUN rm -rf /var/www/html/*

# Copier les fichiers composer et installer les dépendances
COPY composer.json composer.lock ./
RUN composer install --no-scripts --no-autoloader

# Copier le reste des fichiers de l'application
COPY . .

# Finaliser Composer
RUN composer dump-autoload --optimize --no-dev

# Donner les permissions adéquates
RUN chown -R nginx:nginx /var/www/html

# Script de démarrage
RUN echo '#!/bin/sh\n\
# Remplacer PORT dans la config NGINX\n\
envsubst \$PORT < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf\n\
\n\
# Vider le cache Symfony\n\
php bin/console cache:clear --env=prod\n\
\n\
# Démarrer PHP-FPM\n\
php-fpm82 -D\n\
\n\
# Démarrer NGINX\n\
nginx -g "daemon off;"\n' > /start.sh && chmod +x /start.sh

# Exposer le port
ENV PORT=8080
EXPOSE 8080

# Démarrer les services
CMD ["/start.sh"]